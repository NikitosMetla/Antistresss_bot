from aiogram import Router, types, Bot, F
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.answers import Answers
from db.users_stat import Users_stat
from settings import start_text, InputMessage
from utils.is_now_day import is_now_day

day_router1 = Router()


@day_router1.callback_query(Text(text="confirm|1"))
@is_now_day(1)
async def start_day1(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await message.message.edit_reply_markup()
    await state.clear()
    question = await message.message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è, —á—Ç–æ –≤–æ–æ–±—â–µ —Ç–∞–∫–æ–µ —Å—Ç—Ä–µ—Å—Å. –ß—Ç–æ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –ø–æ–¥ —Å—Ç—Ä–µ—Å—Å–æ–º?")
    await state.set_state(InputMessage.input_answer_state1)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)
    await message.message.delete()


@day_router1.message(F.text, InputMessage.input_answer_state1)
@is_now_day(1)
async def answer_start1(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_new_user(message.from_user.id)
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ! –í—Å–ª–µ–¥ –∑–∞ –¥–æ–∫—Ç–æ—Ä–æ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫ –ê.–ë. –õ–µ–æ–Ω–æ–≤–æ–π, –º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–µ—Å—Å –∫–∞–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, —Å—Ç—Ä–µ—Å—Å ‚Äî —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å, —Å—Ç–∞–ª–∫–∏–≤–∞—è—Å—å —Å–æ —Å–ª–æ–∂–Ω–æ–π –∏ –≤–∞–∂–Ω–æ–π –¥–ª—è —Ç–µ–±—è –∑–∞–¥–∞—á–µ–π. –ü—Ä–∏ —ç—Ç–æ–º —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∂–µ–ª–∞–Ω–∏–µ –ª–∏–±–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –ª–∏–±–æ –∏–∑–±–∞–≤–∏—Ç—Å—è –æ—Ç –Ω–µ—ë. –ò –≤ —ç—Ç–æ–º —Å—Ç—Ä–µ—Å—Å –º–æ–∂–µ—Ç –∫–∞–∫ –ø–æ–º–æ—á—å, —Ç–∞–∫ –∏ –ø–æ–º–µ—à–∞—Ç—å. –ù–æ —ç—Ç–æ –º—ã –æ–±—Å—É–¥–∏–º –ø–æ–∑–∂–µ\n–ê —Ç–µ–ø–µ—Ä—å –≤—Å–ø–æ–º–Ω–∏, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–ª —Å—Ç—Ä–µ—Å—Å? –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç—á—ë—Ç –≤ —á–∞—Ç–µ ")
    await state.set_state(InputMessage.input_answer_state1_1)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router1.message(F.text, InputMessage.input_answer_state1_1)
@is_now_day(1)
async def answer_start1(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ß—Ç–æ –µ–≥–æ –≤—ã–∑–≤–∞–ª–æ?")
    await state.set_state(InputMessage.input_answer_state1_2)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router1.message(F.text, InputMessage.input_answer_state1_2)
@is_now_day(1)
async def answer_start1(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data="YES|1"))
    keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data="NO|1"))
    await message.answer(text="–ú–æ–∂–Ω–æ –ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ–π –∏ –∑–Ω–∞—á–∏–º–æ–π –∑–∞–¥–∞—á–µ–π?", reply_markup=keyboard.as_markup())
    await state.clear()


@day_router1.callback_query(Text(text="YES|1"))
@is_now_day(1)
async def start_day1(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await message.message.answer("üëå")
    await message.message.answer("–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç—ã —Å—Ä–∞–∑—É —ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª, —Ö–æ—Ç—è –≤—ã–≤–æ–¥ –Ω–µ –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–≤–∏–¥–Ω—ã–º."
                                 " –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º."
                                 " –ù–∞ –ø–µ—Ä–≤—ã–π –≤–∑–≥–ª—è–¥ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è, —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç —Å–ª–æ–∂–Ω–æ–π –∏–ª–∏ –∑–Ω–∞—á–∏–º–æ–π –∑–∞–¥–∞—á–∏,"
                                 " –Ω–æ –µ—Å–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–ª—É–±–∂–µ, —Ç–æ —Å—Ç–∞–Ω–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Ç–µ–±–µ –≤–∞–∂–Ω–æ –±—ã—Ç—å"
                                 " —É—Å–ª—ã—à–∞–Ω–Ω—ã–º –∏ –ø–æ–Ω—è—Ç—ã–º. –ò —ç—Ç–æ –∏ —è–≤–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–∏–º–æ–π –∑–∞–¥–∞—á–µ–π –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ\n\n–°–µ–≥–æ–¥–Ω—è"
                                 " –º—ã —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å —Å —Ç–µ–º, —á—Ç–æ –∂–µ —Ç–∞–∫–æ–µ —Å—Ç—Ä–µ—Å—Å –∏ –≤—ã–¥–µ–ª–∏–ª–∏ –µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –Ω–∞ –æ—Å–Ω–æ–≤–µ"
                                 " –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º,"
                                 " –∞ –∑–∞–≤—Ç—Ä–∞ –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º, —á—Ç–æ —Å—Ç—Ä–µ—Å—Å ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–µ, –∏–º–µ—é—â–µ–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–¥–∏–π"
                                 " –≤ —Å–≤–æ–µ–π –¥–∏–Ω–∞–º–∏–∫–µ üìâ")
    await Users_stat(message.from_user.id).edit_user_end_day()


@day_router1.callback_query(Text(text="NO|1"))
@is_now_day(1)
async def start_day1(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–î–∞, –ø—Ä–∏—á–∏–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–∂–Ω–æ–π –∏–ª–∏/–∏ –∑–Ω–∞—á–∏–º–æ–π –∑–∞–¥–∞—á–µ–π", callback_data="NO_2|1"))
    keyboard.row(InlineKeyboardButton(text="–í—Å—ë-—Ç–∞–∫–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–µ—Å—Å", callback_data="NO_2|1"))
    await message.message.answer("–•–º‚Ä¶ –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞: 1 ‚Äî —ç—Ç–æ –Ω–µ —Å—Ç—Ä–µ—Å—Å, –∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ; 2 ‚Äî –Ω–∞ –ø—Ä–∏—á–∏–Ω—É –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥ –¥—Ä—É–≥–∏–º —É–≥–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º. –ù–∞ –ø–µ—Ä–≤—ã–π –≤–∑–≥–ª—è–¥ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è, —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç —Å–ª–æ–∂–Ω–æ–π –∏–ª–∏ –∑–Ω–∞—á–∏–º–æ–π –∑–∞–¥–∞—á–∏, –Ω–æ –µ—Å–ª–∏ –∫–∞–ø–Ω—É—Ç—å –≥–ª—É–±–∂–µ, —Ç–æ —Å—Ç–∞–Ω–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Ç–µ–±–µ –≤–∞–∂–Ω–æ –±—ã—Ç—å —É—Å–ª—ã—à–∞–Ω–Ω—ã–º –∏ –ø–æ–Ω—è—Ç—ã–º. –ò —ç—Ç–æ –∏ —è–≤–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–∏–º–æ–π –∑–∞–¥–∞—á–µ–π –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ. –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º, —Ç–æ—á–Ω–æ –ª–∏ –ø—Ä–∏—á–∏–Ω—É —Ç–≤–æ–µ–≥–æ –∫—Ä–∞–π–Ω–µ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞ –Ω–µ–ª—å–∑—è –Ω–∞–∑–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ–π –∏–ª–∏/–∏ –∑–Ω–∞—á–∏–º–æ–π –∑–∞–¥–∞—á–µ–π?",
                                 reply_markup=keyboard.as_markup())


@day_router1.callback_query(Text(text="NO_2|1"))
@is_now_day(1)
async def start_day1(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await message.message.answer("üëå–°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å —Å —Ç–µ–º, —á—Ç–æ –∂–µ —Ç–∞–∫–æ–µ —Å—Ç—Ä–µ—Å—Å –∏ –≤—ã–¥–µ–ª–∏–ª–∏ –µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º, –∞ –∑–∞–≤—Ç—Ä–∞ –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º, —á—Ç–æ —Å—Ç—Ä–µ—Å—Å ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–µ, –∏–º–µ—é—â–µ–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–¥–∏–π –≤ —Å–≤–æ–µ–π –¥–∏–Ω–∞–º–∏–∫–µ üìâ")
    user = Users_stat(message.from_user.id)
    await user.edit_user_end_day()

import asyncio
from aiogram import types, Dispatcher, Router, F, Bot
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.answers import Answers
from db.users_stat import Users_stat
from handlers.user_handlers import start_LLIC
from settings import InputMessage, sticker_ids
from utils.is_now_day import is_now_day

day_router19 = Router()

@day_router19.callback_query(Text(text="confirm|19"), any_state)
@is_now_day(19)
async def start_day19(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await message.message.edit_reply_markup()
    await state.clear()
    await message.message.answer(
        "–ú—ã —Å —Ç–æ–±–æ–π —É–∂–µ –º–Ω–æ–≥–æ –≥–æ–≤–æ—Ä–∏–ª–∏ –æ —Ç–æ–º, —á—Ç–æ —Å—Ç—Ä–µ—Å—Å —ç—Ç–æ ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å, —Å—Ç–∞–ª–∫–∏–≤–∞—è—Å—å —Å–æ —Å–ª–æ–∂–Ω–æ–π "
        "–∏–ª–∏ –≤–∞–∂–Ω–æ–π –¥–ª—è —Ç–µ–±—è –∑–∞–¥–∞—á–µ–π. –ò –≤ —ç—Ç–æ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫—Ä–æ–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –ø–æ—á–µ–º—É –≤ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ —Å–∏—Ç—É–∞—Ü–∏–∏ "
        "–æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –Ω–∞—á–Ω—ë—Ç –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å, –∞ –¥—Ä—É–≥–æ–π –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–ø–æ–∫–æ–µ–Ω"
    )
    question = await message.message.answer("–ï—Å—Ç—å –∏–¥–µ–∏?")
    await state.set_state(InputMessage.input_answer_state19_1)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router19.message(F.text, InputMessage.input_answer_state19_1)
@is_now_day(19)
async def answer_day19_1(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    await state.clear()
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–ü–æ–≥–Ω–∞–ª–∏", callback_data="Pognali|19"))
    await message.answer_sticker(sticker=sticker_ids[3])
    await message.answer("–î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –Ω–∞—à–∞ –ø—Å–∏—Ö–∏–∫–∞ –∏–º–µ–µ—Ç —Å–ª–æ–∂–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ –º—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –Ω–µ –±—É–∫–≤–∞–ª—å–Ω–æ, "
                         "–∞, —Å–∫–∞–∂–µ–º —Ç–∞–∫, –∫–∞–∫ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –Ω–∞—à–µ–º –∂–∏–∑–Ω–µ–Ω–Ω–æ–º –æ–ø—ã—Ç–µ. "
                         "–≠—Ç–æ –∫—Ä–∞–π–Ω–µ –ø–æ–ª–µ–∑–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–º –º–∏—Ä–µ, –∏ –æ–Ω –∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ "
                         "—Ç–æ, —á—Ç–æ –∫—Ç–æ-—Ç–æ –≤–æ—Å–ø—Ä–∏–º–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –∫–∞–∫ —Å–ª–æ–∂–Ω—É—é/–≤–∞–∂–Ω—É—é, –∞ –∫—Ç–æ-—Ç–æ –Ω–µ—Ç, –∏, –∫–∞–∫ —Å–ª–µ–¥—Å—Ç–≤–∏–µ, –≤ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö "
                         "–∂–µ —É—Å–ª–æ–≤–∏—è—Ö —É –∫–æ–≥–æ-—Ç–æ —Ä–∞–∑–æ–≤—å—ë—Ç—Å—è —Å—Ç—Ä–µ—Å—Å, –∞ —É –∫–æ–≥–æ-—Ç–æ –Ω–µ—Ç. –ü–æ—ç—Ç–æ–º—É –≤–Ω–µ—à–Ω–∏–π —Ñ–∞–∫—Ç–æ—Ä —Å–∞–º –ø–æ —Å–µ–±–µ –Ω–∏–∫–æ–≥–¥–∞ "
                         "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–∏–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π —Å—Ç—Ä–µ—Å—Å–∞ (–∫–æ–Ω–µ—á–Ω–æ, –º—ã –∑–¥–µ—Å—å –≥–æ–≤–æ—Ä–∏–º –ø—Ä–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å, "
                         "—Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å –∂–µ –±—É–¥–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –ø—Ä–∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–º —á–µ–ª–æ–≤–µ–∫–∞ "
                         "(—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä, —Å–∏–ª—å–Ω—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π, —Ç–æ–∫—Å–∏–Ω–æ–≤ –∏ —Ç.–¥.) –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ "
                         "—Å–∏—Ç—É–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–æ–º)\n\n"
                         "–í –æ–±—â–µ–º, –∫ —á–µ–º—É –≤—Å—ë —ç—Ç–æ: —Ç–∞–∫ –∫–∞–∫ –∑–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –æ—Ç–≤–µ—á–∞—é—Ç —É—Å–ª–æ–≤–Ω—ã–µ ‚Äú—Ñ–∏–ª—å—Ç—Ä—ã‚Äù, –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö "
                         "—Å–ª—É—á–∞—è—Ö –∏—Ö –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É?",
                         reply_markup=keyboard.as_markup())


@day_router19.callback_query(Text(text="Pognali|19"))
@is_now_day(19)
async def continue_day19(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–í—Å–ø–æ–º–Ω–∏–ª", callback_data="REMEMBER|19"))
    await message.message.answer(
        "–ò—Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∫–∞–∫ —Å–ª–æ–∂–Ω–æ–π –∏–ª–∏ –≤–∞–∂–Ω–æ–π, –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –Ω–µ—ë –ø–æ–¥ –¥—Ä—É–≥–∏–º —É–≥–ª–æ–º:"
        "\n<b>–í–∞—Ä–∏–∞–Ω—Ç 1</b>: –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å, —á—Ç–æ —Ç—ã –±—É–¥–µ—à—å –¥—É–º–∞—Ç—å –æ–± —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 20, 30-50 –ª–µ—Ç. "
        "–ë—É–¥–µ—à—å –ª–∏ —Ç—ã –≤–æ–æ–±—â–µ –ø—Ä–æ –Ω–µ—ë –ø–æ–º–Ω–∏—Ç—å? –ë—É–¥–µ—Ç –ª–∏ –æ–Ω–∞ –∫–∞–∑–∞—Ç—å—Å—è —Ç–µ–±–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ–π? "
        "–ë—É–¥–µ—à—å –ª–∏ —Ç—ã —É–¥–∏–≤–ª—è—Ç—å—Å—è —Ç–æ–º—É, –∫–∞–∫ —Å–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∂–∏–≤–∞–ª –∏–∑-–∑–∞ –Ω–µ—ë?"
        "\n<b>–í–∞—Ä–∏–∞–Ω—Ç 2</b>: –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–∞–º—ã–π —Ö—É–¥—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π –∏ —Å–ø–æ—Å–æ–± –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –Ω—ë–º. "
        "–ö–∞–∫–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∞–º—ã–π —Å—Ç—Ä–∞—à–Ω—ã–π –∏—Å—Ö–æ–¥? –ò —á—Ç–æ —Ç—ã —Ç–æ–≥–¥–∞ –±—É–¥–µ—à—å —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å?"
        "\n<b>–í–∞—Ä–∏–∞–Ω—Ç 3</b>: –ø–æ–¥—É–º–∞—Ç—å –æ —Ç–æ–º, –∞ –∫–∞–∫–∏–µ –µ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —É —Å–æ–∑–¥–∞–≤—à–µ–π—Å—è —Å–∏—Ç—É–∞—Ü–∏–∏? "
                                 "–ß–µ–º—É –æ–Ω–∞ –º–æ–∂–µ—Ç –Ω–∞—É—á–∏—Ç—å? –û—Ç –∫–∞–∫–∏—Ö –æ—à–∏–±–æ–∫ —É–±–µ—Ä–µ—á—å –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º?")
    await message.message.answer(f'–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –∫–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–∞—Å—Ç—å—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ—á–Ω—ã–π –ø–æ—Ç–æ–∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π, —Ö–æ—Ä–æ—à–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –≤ —Å–æ–∑–Ω–∞–Ω–∏–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ —è –º–æ–≥—É —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è\n‚Ä¢ —è —Ö–æ—á—É —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É\n‚Ä¢ —è –≥–æ—Ç–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º\n–ó–¥–µ—Å—å —Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ—à—å —Å–µ–±—è –Ω–∞ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —Ç–∞–∫–∏—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: —ç—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–µ (–æ–¥–Ω–æ –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏ –æ–¥–Ω–æ —Å–∫–∞–∑—É–µ–º–æ–µ), –∫–æ—Ä–æ—Ç–∫–∏–µ (–¥–æ 6 —Å–ª–æ–≤) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ (–Ω–∞–º–µ—Ä–µ–Ω–∏—è—Ö, –æ—â—É—â–µ–Ω–∏—è—Ö –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –≤ —Ç–µ–ª–µ –∏ —Ç.–ø.) –≤ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ (–Ω–∏–∫–∞–∫–∏—Ö —á–∞—Å—Ç–∏—á–µ–∫ ‚Äú–Ω–µ‚Äù –∏–ª–∏ —Å–∫—Ä—ã—Ç–æ–≥–æ –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –≤ —Å–ª–æ–≤–µ "–±–µ–∑–æ—à–∏–±–æ—á–Ω–æ"). –ê –µ—â—ë, —Ç—ã –¥–æ–ª–∂–µ–Ω –≤ –Ω–∏—Ö –≤–µ—Ä–∏—Ç—å. –ï—Å–ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–æ–º, —á—Ç–æ —Å–ø—Ä–∞–≤–∏—à—å—Å—è, –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ "—è –ø–æ–ø—Ä–æ–±—É—é —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è" –∏ "—è —Å–¥–µ–ª–∞—é –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞". –ü–æ–≤—Ç–æ—Ä–∏ —ç—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑üòâ')
    await message.message.answer("–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ. –í—Å–ø–æ–º–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏–ª–∞", reply_markup=keyboard.as_markup())



@day_router19.callback_query(Text(text="REMEMBER|19"))
@is_now_day(19)
async def continue_reflexive_day19(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    question = await message.message.answer("–ö–∞–∫–æ–π –∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç–µ–±–µ –±—ã –ª—É—á—à–µ –ø–æ–¥–æ—à—ë–ª –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏: "
                         "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å, –∫–∞–∫ —Ç—ã –±—É–¥–µ—à—å –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –¥–µ—Å—è—Ç–∫–æ–≤ –ª–µ—Ç, "
                         "–∫–∞–∫–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∞–º—ã–π —Ö—É–¥—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π –∏ —á—Ç–æ —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å, "
                         "–µ—Å–ª–∏ –æ–Ω –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –∏–ª–∏ –Ω–∞–π—Ç–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å–æ–±—ã—Ç–∏–π?")
    await state.set_state(InputMessage.input_answer_state19_3)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router19.message(F.text, InputMessage.input_answer_state19_3)
@is_now_day(19)
async def answer_day19_3(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ò —á—Ç–æ –±—ã —Ç—ã —Ç–æ–≥–¥–∞ —Å—Ç–∞–ª –¥—É–º–∞—Ç—å –æ —Å–∏—Ç—É–∞—Ü–∏–∏?")
    await state.set_state(InputMessage.input_answer_state19_4)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router19.message(F.text, InputMessage.input_answer_state19_4)
@is_now_day(19)
async def answer_day19_4(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ö–∞–∫–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –∑–∞–∫—Ä–µ–ø–∏—Ç—å?")
    await state.set_state(InputMessage.input_answer_state19_5)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router19.message(F.text, InputMessage.input_answer_state19_5)
@is_now_day(19)
async def answer_day19_5(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    await state.clear()
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data="YES_ZAKREP|19"))
    keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data="NO_ZAKREP|19"))
    await message.answer(
        "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ –≤ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ?",
    reply_markup=keyboard.as_markup())


@day_router19.message(F.text, InputMessage.input_answer_state19_7)
@day_router19.callback_query(Text(text="YES_ZAKREP|19"))
@is_now_day(19)
async def continue_reflexive_day19(message: types.CallbackQuery | types.Message, state: FSMContext, bot: Bot):
    if type(message) == types.CallbackQuery:
        question = await message.message.answer("–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π –∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≤—Ç—Ä–∞ –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è?")
    else:
        data = await state.get_data()
        question = data.get("question")
        answers = Answers()
        await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
        question = await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π –∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≤—Ç—Ä–∞ –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è?")
    await state.set_state(InputMessage.input_answer_state19_6)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router19.callback_query(Text(text="NO_ZAKREP|19"))
@is_now_day(19)
async def continue_reflexive_day19(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    question = await message.message.answer("–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑")
    await state.set_state(InputMessage.input_answer_state19_7)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router19.message(F.text, InputMessage.input_answer_state19_6)
@is_now_day(19)
async def answer_day19_4(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    await message.answer("–û–¥–æ–±—Ä—è–µ–º! –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞ üòâ")
    await state.clear()
    await Users_stat(message.from_user.id).edit_user_end_day()



import asyncio
from datetime import datetime, timedelta

from aiogram import types, Dispatcher, Router, F, Bot
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state

from db.answers import Answers
from db.users_stat import Users_stat
from handlers.user_handlers import start_LLIC
from settings import InputMessage
from utils.is_now_day import is_now_day

day_router8 = Router()


@day_router8.callback_query(Text(text="confirm|8"), any_state)
@is_now_day(8)
async def start_day8(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    if int(str(await Users_stat(message.from_user.id).get_user_day())) == int(message.data.split("|")[1]):
        now = datetime.now()
        target_time = datetime(now.year, now.month, now.day, 20, 35)
        if now >= target_time:
            target_time += timedelta(days=1)
        time_difference = target_time - now
        await message.message.answer("–í–µ—á–µ—Ä–æ–º –≤–µ—Ä–Ω–µ–º—Å—è —Å —Ä–∞—Å—Å–ø—Ä–æ—Å–∞–º–∏üòÑ")
        await asyncio.sleep(time_difference.total_seconds())
        question = await message.message.answer(text="–ù—É —á—Ç–æ, –∫–∞–∫ —É—Å–ø–µ—Ö–∏? –ß—Ç–æ —Å—Ç–∞–ª–æ –ø—Ä–∏—á–∏–Ω–æ–π —Å—Ç—Ä–µ—Å—Å–∞ —Å–µ–≥–æ–¥–Ω—è?")
        await state.set_state(InputMessage.input_answer_state8_1)
        await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router8.message(F.text, InputMessage.input_answer_state8_1)
@is_now_day(8)
async def answer_day8_1(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –ø—Ä–∏ —ç—Ç–æ–º –≤–æ–∑–Ω–∏–∫–∞–ª–∏?")
    await state.set_state(InputMessage.input_answer_state8_2)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router8.message(F.text, InputMessage.input_answer_state8_2)
@is_now_day(8)
async def answer_day8_2(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ê —á—Ç–æ –±—ã–ª–æ —Å —Ç–µ–ª–æ–º?")
    await state.set_state(InputMessage.input_answer_state8_3)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router8.message(F.text, InputMessage.input_answer_state8_3)
@is_now_day(8)
async def answer_day8_3(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –±—ã–ª–∏?")
    await state.set_state(InputMessage.input_answer_state8_4)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router8.message(F.text, InputMessage.input_answer_state8_4)
@is_now_day(8)
async def answer_day8_4(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ê —á—Ç–æ —Ç—ã –¥–µ–ª–∞–ª –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ (–∏–ª–∏ –≤ —ç—Ç–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –µ—Å–ª–∏ –∏—Ö –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)?")
    await state.set_state(InputMessage.input_answer_state8_5)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router8.message(F.text, InputMessage.input_answer_state8_5)
@is_now_day(8)
async def answer_day8_5(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    await message.answer("–°—É–ø–µ—Ä! –¢—ã —Å–ª–∞–≤–Ω–æ –ø–æ—Ç—Ä—É–¥–∏–ª—Å—è —Å–µ–≥–æ–¥–Ω—è, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –∏ –æ—Ç–¥–æ—Ö–Ω–µ—à—å –Ω–µ —Ö—É–∂–µ üëê\n\n–î–∞–≤–∞–π –µ—â—ë –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É —Ç–µ–±—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º")
    await state.clear()
    await start_LLIC(message, state, bot)

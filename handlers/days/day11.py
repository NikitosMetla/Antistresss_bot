import asyncio
from datetime import datetime, timedelta

from aiogram import types, Dispatcher, Router, F, Bot
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state

from db.answers import Answers
from db.users_stat import Users_stat
from handlers.user_handlers import start_statement_next_days
from settings import InputMessage
from utils.is_now_day import is_now_day

day_router11 = Router()


@day_router11.callback_query(Text(text="confirm|11"), any_state)
@is_now_day(11)
async def start_day11(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await message.message.edit_reply_markup()
    now = datetime.now()
    target_time = datetime(now.year, now.month, now.day, 20, 29)
    if now >= target_time:
        target_time += timedelta(days=1)
    time_difference = target_time - now
    await message.message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å")
    await asyncio.sleep(time_difference.total_seconds())
    question = await message.message.answer(
        text="–ò—Ç–∞–∫, –ø—Ä–æ–π–¥—ë–º—Å—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑. –ö–∞–∫–∏–µ –ø—Ä–∏—á–∏–Ω—ã —Å—Ç—Ä–µ—Å—Å–∞ —É–¥–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—Ç–∏—Ç—å?")
    await state.set_state(InputMessage.input_answer_state11_1)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router11.message(F.text, InputMessage.input_answer_state11_1)
@is_now_day(11)
async def answer_day11_1(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏?")
    await state.set_state(InputMessage.input_answer_state11_2)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router11.message(F.text, InputMessage.input_answer_state11_2)
@is_now_day(11)
async def answer_day11_2(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ß—Ç–æ –±—ã–ª–æ —Å —Ç–µ–ª–æ–º?")
    await state.set_state(InputMessage.input_answer_state11_3)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router11.message(F.text, InputMessage.input_answer_state11_3)
@is_now_day(11)
async def answer_day11_3(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –≤–æ–∑–Ω–∏–∫–∞–ª–∏?")
    await state.set_state(InputMessage.input_answer_state11_4)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router11.message(F.text, InputMessage.input_answer_state11_4)
@is_now_day(11)
async def answer_day11_4(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ò —á—Ç–æ —Ç—ã –ø—Ä–∏ —ç—Ç–æ–º –¥–µ–ª–∞–ª?")
    await state.set_state(InputMessage.input_answer_state11_5)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router11.message(F.text, InputMessage.input_answer_state11_5)
@is_now_day(11)
async def answer_day11_5(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ–º –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µüòâ\n"
                         "–î–∞–≤–∞–π –µ—â—ë –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É —Ç–µ–±—è —Å —Ä–∞–±–æ—á–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º")
    await state.clear()
    await start_statement_next_days(message, state, bot)

import asyncio
from datetime import datetime, timedelta

from aiogram import types, Dispatcher, Router, F, Bot
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.answers import Answers
from db.users_stat import Users_stat
from settings import InputMessage
from utils.is_now_day import is_now_day

day_router7 = Router()


@day_router7.callback_query(Text(text="confirm|7"), any_state)
@is_now_day(7)
async def start_day7(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await message.message.edit_reply_markup()
    await state.clear()
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–û–∫", callback_data="OK|7"))
    await message.message.answer("–ü–æ–º–∏–º–æ –ø—Ä–∏—á–∏–Ω –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è, –º—ã—Å–ª–µ–π –∏ —á—É–≤—Å—Ç–≤ –≤ —Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–µ—Å—Å–∞, "
                                 "–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–º–µ—á–∞—Ç—å –µ—â—ë –∏ —ç–º–æ—Ü–∏–∏. –ï—Å–ª–∏ —Ç–µ–±–µ –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏, "
                                 "–º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º –±–∞–∑–æ–≤—ã—Ö —ç–º–æ—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–µ–ª–∏–ª –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥ –ö.–ò–∑–∞—Ä–¥:"
                                 "\n‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å\n‚Ä¢ –†–∞–¥–æ—Å—Ç—å\n‚Ä¢ –£–¥–∏–≤–ª–µ–Ω–∏–µ\n‚Ä¢ –ì–æ—Ä–µ\n‚Ä¢ –ì–Ω–µ–≤\n‚Ä¢ –û—Ç–≤—Ä–∞—â–µ–Ω–∏–µ\n‚Ä¢ –ü—Ä–µ–∑—Ä–µ–Ω–∏–µ\n‚Ä¢ –°—Ç—Ä–∞—Ö"
                                 "\n‚Ä¢ –°—Ç—ã–¥\n‚Ä¢ –í–∏–Ω–∞\n–ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å—ë –≤ –∑–∞–º–µ—Ç–∫–∏ üòâ", reply_markup=keyboard.as_markup())


@day_router7.callback_query(Text(text="OK|7"))
@is_now_day(7)
async def ok_day7(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await message.message.edit_reply_markup()
    now = datetime.now()
    target_time = datetime(now.year, now.month, now.day, 20, 38)
    if now >= target_time:
        target_time += timedelta(days=1)
    time_difference = target_time - now
    await message.message.answer("–í–µ—á–µ—Ä–æ–º –≤–µ—Ä–Ω–µ–º—Å—è —Å —Ä–∞—Å—Å–ø—Ä–æ—Å–∞–º–∏üòÑ")
    await asyncio.sleep(time_difference.total_seconds())
    question = await message.message.answer(text="–ù—É —á—Ç–æ, –∫–∞–∫ —É—Å–ø–µ—Ö–∏? –ß—Ç–æ —Å—Ç–∞–ª–æ –ø—Ä–∏—á–∏–Ω–æ–π —Å—Ç—Ä–µ—Å—Å–∞ —Å–µ–≥–æ–¥–Ω—è?")
    await state.set_state(InputMessage.input_answer_state7_1)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router7.message(F.text, InputMessage.input_answer_state7_1)
@is_now_day(7)
async def answer_day7_1(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –ø—Ä–∏ —ç—Ç–æ–º –≤–æ–∑–Ω–∏–∫–∞–ª–∏?")
    await state.set_state(InputMessage.input_answer_state7_2)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router7.message(F.text, InputMessage.input_answer_state7_2)
@is_now_day(7)
async def answer_day7_2(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ê —á—Ç–æ –±—ã–ª–æ —Å —Ç–µ–ª–æ–º?")
    await state.set_state(InputMessage.input_answer_state7_3)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router7.message(F.text, InputMessage.input_answer_state7_3)
@is_now_day(7)
async def answer_day7_3(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –≤–æ–∑–Ω–∏–∫–∞–ª–∏?")
    await state.set_state(InputMessage.input_answer_state7_4)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router7.message(F.text, InputMessage.input_answer_state7_4)
@is_now_day(7)
async def answer_day7_4(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    await message.answer("–£—Ö, –Ω–∏—á–µ–≥–æ —Å–µ–±–µ! –í–æ—Ç —ç—Ç–æ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è)) –¢–æ –ª–∏ –µ—â—ë –±—É–¥–µ—Ç üòÑ")
    await state.clear()
    user = Users_stat(message.from_user.id)
    await user.edit_user_end_day()

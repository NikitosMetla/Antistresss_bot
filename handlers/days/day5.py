import asyncio
from datetime import datetime, timedelta

from aiogram import types, Dispatcher, Router, F, Bot
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.users_stat import Users_stat
from settings import InputMessage, sticker_ids
from utils.is_now_day import is_now_day

day_router5 = Router()


@day_router5.callback_query(Text(text="confirm|5"), any_state)
@is_now_day(5)
async def start_day5(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    if int(await Users_stat(message.from_user.id).get_user_day()) == int(message.data.split("|")[1]):
        await state.clear()
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å", callback_data="AGREED|5"))
        await message.message.answer("–î–ª—è —ç—Ç–æ–≥–æ –º—ã –Ω–∞—á–Ω—ë–º —É–≥–ª—É–±–ª—è—Ç—å—Å—è –≤ –ø—Ä–∞–∫—Ç–∏–∫—É –∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –ø–æ—Å–≤—è—Ç–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—é üëÄ "
                                     "–ù–æ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞—Ç—å –º—ã –∑–∞ —Ç–æ–±–æ–π –Ω–µ –º–æ–∂–µ–º, –ø–æ—ç—Ç–æ–º—É —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Å–æ–±–æ–π"
                                     "–ù–∞—á–Ω—ë–º —Å —Ç–æ–≥–æ, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ—á–∞—Ç—å, —á—Ç–æ —É —Ç–µ–±—è –≤—ã–∑—ã–≤–∞–µ—Ç "
                                     "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (—ç—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–æ–ª–ª–µ–≥, —Ä–∞–∑—Ä—è–¥–∏–≤—à–∏–π—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω, "
                                     "–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —É—á—ë–±–µ, –≤ –æ–±—â–µ–º –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ) –∏ –µ—â—ë –∫–∞–∫–∏–µ –º—ã—Å–ª–∏ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –≤–æ–∑–Ω–∏–∫–∞—é—Ç. "
                                     "–ó–∞–≤–µ–¥–∏ —Å–µ–±–µ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–º–µ—Ç–∫—É –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π —Ç—É–¥–∞ –ø—Ä–∏—á–∏–Ω—ã —Å—Ç—Ä–µ—Å—Å–∞ + –º—ã—Å–ª–∏ üôÇ "
                                     "–í–∞–∂–Ω–æ –ø–æ–¥–º–µ—á–∞—Ç—å –¥–∞–∂–µ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ, –∫–∞–∑–∞–ª–æ—Å—å –±—ã, —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç—ã "
                                     "–∏–º–µ—é—Ç —Å–≤–æ–π—Å—Ç–≤–æ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è –∏ –ø–µ—Ä–µ—Ä–∞—Å—Ç–∞—é—Ç –≤ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å (–∫–æ—Ç–æ—Ä—ã–π –ø–æ —Å–≤–æ–∏–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º "
                                     "–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ–ø–∞—Å–Ω–µ–µ –æ—Å—Ç—Ä–æ–≥–æ)\n\n–í–µ—á–µ—Ä–æ–º —É—Ç–æ—á–Ω–∏–º, —á—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å üëê –û–∫?",
                                     reply_markup=keyboard.as_markup())


@day_router5.callback_query(Text(text="AGREED|5"))
@is_now_day(5)
async def agreed_day5(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    now = datetime.now()
    target_time = datetime(now.year, now.month, now.day, 20, 49)
    if now >= target_time:
        target_time += timedelta(days=1)
    time_difference = target_time - now
    await asyncio.sleep(time_difference.total_seconds())
    await message.message.answer(text="–ö–∞–∫ —É—Å–ø–µ—Ö–∏? –£–¥–∞–ª–æ—Å—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –º—ã—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–µ—Å—Å–∞?"
                                      " –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? (–ú–æ–∂–µ—à—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—é–¥–∞ —Å–≤–æ—é –∑–∞–º–µ—Ç–∫—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å"
                                      " –≤ –±–æ–ª–µ–µ –æ–±–æ–±—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ)")
    await state.set_state(InputMessage.input_answer_state5_1)


@day_router5.message(F.text, InputMessage.input_answer_state5_1)
@is_now_day(5)
async def answer_remembered3(message: types.Message, state: FSMContext, bot: Bot):
    await message.answer_sticker(sticker=sticker_ids[1])
    await message.answer("–•–æ—Ä–æ—à–æ! –ü—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–≤—Ç—Ä–∞)")
    await state.clear()
    user = Users_stat(message.from_user.id)
    await user.edit_user_end_day()

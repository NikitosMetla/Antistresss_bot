import asyncio
from datetime import datetime, timedelta

from aiogram import types, Router, F, Bot
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.answers import Answers
from db.users_stat import Users_stat
from handlers.user_handlers import start_LLIC
from settings import InputMessage
from utils.is_now_day import is_now_day

day_router6 = Router()

@day_router6.callback_query(Text(text="confirm|6"), any_state)
@is_now_day(6)
async def start_day6(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await message.message.edit_reply_markup()
    await state.clear()
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–û–∫–∏-–¥–æ–∫–∏", callback_data="OKI_DOKI|6"))
    await message.message.answer("–°–µ–≥–æ–¥–Ω—è –º—ã —É—Å–ª–æ–∂–Ω–∏–º –∑–∞–¥–∞—á—É: –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ—á–∞—Ç—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è, "
                                 "–º—ã—Å–ª–∏ –∏ (–±–∞—Ä–∞–±–∞–Ω–Ω–∞—è –¥—Ä–æ–±—å) –æ—â—É—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ (–ø–æ–º–Ω–∏—à—å, –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏ –ø—Ä–æ —Ç–æ, —á—Ç–æ —Å—Ç—Ä–µ—Å—Å "
                                 "–ø–æ-—Ä–∞–∑–Ω–æ–º—É –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ?) –í–µ—á–µ—Ä–æ–º —É—Ç–æ—á–Ω–∏–º, —á—Ç–æ —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ—Ç–∏—Ç—å üòâ", reply_markup=keyboard.as_markup())


@day_router6.callback_query(Text(text="OKI_DOKI|6"))
@is_now_day(6)
async def oki_doki_day6(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await message.message.edit_reply_markup()
    await message.message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å)")
    now = datetime.now()
    target_time = datetime(now.year, now.month, now.day, 20, 41)
    if now >= target_time:
        target_time += timedelta(days=1)
    time_difference = target_time - now
    await asyncio.sleep(time_difference.total_seconds())
    question = await message.message.answer("–ù—É —á—Ç–æ, –∫–∞–∫ —É—Å–ø–µ—Ö–∏? –ß—Ç–æ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Å—Ç—Ä–µ—Å—Å–∞ —Å–µ–≥–æ–¥–Ω—è?")
    await state.set_state(InputMessage.input_answer_state6_1)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router6.message(F.text, InputMessage.input_answer_state6_1)
@is_now_day(6)
async def answer_day6_1(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –ø—Ä–∏ —ç—Ç–æ–º –≤–æ–∑–Ω–∏–∫–∞–ª–∏? (–ï—Å–ª–∏ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, "
                         "–ø–∏—à–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ, –Ω–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)")
    await state.set_state(InputMessage.input_answer_state6_2)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router6.message(F.text, InputMessage.input_answer_state6_2)
@is_now_day(6)
async def answer_day6_2(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ê —á—Ç–æ –±—ã–ª–æ —Å —Ç–µ–ª–æ–º?")
    await state.set_state(InputMessage.input_answer_state6_3)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router6.message(F.text, InputMessage.input_answer_state6_3)
@is_now_day(6)
async def answer_day6_3(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    await message.answer("–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞ üôÇ –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n\n–î–∞–≤–∞–π –µ—â—ë –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É —Ç–µ–±—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º")
    await state.clear()
    user = Users_stat(message.from_user.id)
    await start_LLIC(message, state, bot)

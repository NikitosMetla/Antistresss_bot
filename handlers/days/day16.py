from aiogram import types, Dispatcher, Router, F, Bot
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.answers import Answers
from db.users_stat import Users_stat
from handlers.user_handlers import start_LLIC
from settings import InputMessage, sticker_ids
from utils.is_now_day import is_now_day

day_router16 = Router()

@day_router16.callback_query(Text(text="confirm|16"), any_state)
@is_now_day(16)
async def start_day16(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await message.message.edit_reply_markup()
    await state.clear()
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–î–∞, –µ—Å—Ç—å —Ç–∞–∫–æ–µüòÑ", callback_data="UnderstandingProblem|16"))
    await message.message.answer(
        "–ù–∞–≤–µ—Ä–Ω—è–∫–∞ —Ç—ã –∑–∞–º–µ—á–∞–ª, —á—Ç–æ –µ—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å, –∑–∞—á–µ–º —Ç—ã –¥–µ–ª–∞–µ—à—å —Ç—É –∏–ª–∏ –∏–Ω—É—é —Ä–∞–±–æ—Ç—É/–≤—ã–ø–æ–ª–Ω—è–µ—à—å –∑–∞–¥–∞–Ω–∏–µ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ, –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Ç—è–∂–µ–ª—ã–º, –∑–∞—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –≤–æ–≤—Å–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∫–∞ —Ç–µ–±–µ –æ –Ω—ë–º –Ω–µ –Ω–∞–ø–æ–º–Ω—è—Ç.", reply_markup=keyboard.as_markup())


@day_router16.callback_query(Text(text="UnderstandingProblem|16"))
@is_now_day(16)
async def understanding_problem(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    question = await message.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ —É—á–µ–±–µ –æ–±—ä—è—Å–Ω—è—é—Ç, –∫–∞–∫–æ–π —Å–º—ã—Å–ª –≤ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ù–æ —á—Ç–æ–±—ã —Ç–µ–±–µ —Å–∞–º–æ–º—É –±—ã–ª–æ –ª–µ–≥—á–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π, –ª—É—á—à–µ —ç—Ç–æ –≤—Å—ë-—Ç–∞–∫–∏ –≤—ã—è—Å–Ω–∏—Ç—å. –ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?")
    await state.set_state(InputMessage.input_answer_state16_1)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router16.message(F.text, InputMessage.input_answer_state16_1)
@is_now_day(16)
async def answer_day16_1(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    await state.clear()
    await message.answer_sticker(sticker=sticker_ids[-6])
    await message.answer(("–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—â–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤:\n"
                         "‚Ä¢ –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å —É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, –∫–∞–∫ —Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏/—Å–ø—Ä–æ—Å–∏—Ç—å —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–∞–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∏ –∫–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏—Ö –≤ –±—É–¥—É—â–µ–º.\n"
                         "‚Ä¢ –û–±—Å—É–¥–∏—Ç—å —Ç–æ –∂–µ —Å–∞–º–æ–µ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏–ª–∏ –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º–∏."
                         "\n‚Ä¢ –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å –æ —Ç–æ–º, –∫–∞–∫–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–º—ã—Å–ª –≤ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏ –Ω–∞ —á—Ç–æ –æ–Ω–∞ –≤–ª–∏—è–µ—Ç."))
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–û –¥–∞(", callback_data="TaskUnderstandingProblem|16"))
    keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç, —Å —ç—Ç–∏–º –≤—Å—ë –æ–∫", callback_data="NoTaskUnderstandingProblem|16"))
    await message.answer("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Ç–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ç–µ, —Å–º—ã—Å–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å?", reply_markup=keyboard.as_markup())


@day_router16.callback_query(Text(text="TaskUnderstandingProblem|16"))
@is_now_day(16)
async def task_understanding_problem(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–°–ø—Ä–æ—à—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="NoTaskUnderstandingProblem|16"))
    keyboard.row(InlineKeyboardButton(text="–ü–æ–≥–æ–≤–æ—Ä—é —Å –∫–æ–ª–ª–µ–≥–∞–º–∏/–æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º–∏", callback_data="NoTaskUnderstandingProblem|16"))
    keyboard.row(InlineKeyboardButton(text="–ü–æ—Å—Ç–∞—Ä–∞—é—Å—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–π—Ç–∏ —Å–º—ã—Å–ª", callback_data="NoTaskUnderstandingProblem|16"))
    keyboard.row(InlineKeyboardButton(text="–≠—Ç–æ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ, –Ω–µ –±—É–¥—É —Å —ç—Ç–∏–º –≤–æ–∑–∏—Ç—å—Å—è", callback_data="NoTaskUnderstandingProblem|16"))
    await message.message.answer("–ö–∞–∫ —Ç—ã –±—É–¥–µ—à—å –≤ —ç—Ç–æ–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è?", reply_markup=keyboard.as_markup())


@day_router16.callback_query(Text(text="NoTaskUnderstandingProblem|16"))
@is_now_day(16)
async def answer_day16_3(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–í—Å–µ–≥–¥–∞ —Ç–∞–∫ –¥–µ–ª–∞—é", callback_data="ALWAYS_DO|16"))
    keyboard.row(InlineKeyboardButton(text="–≠—Ç–æ –º–æ—è –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞", callback_data="ALWAYS_DO|16"))
    await message.message.answer(
        "–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –ø–æ–π–¥—ë–º –¥–∞–ª—å—à–µ)\n"
        "–°–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –∫–∞—Å–∞–µ—Ç—Å—è –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ ‚Äî –º–∞–ª–æ —á—Ç–æ —Ç–∞–∫ –Ω–∞—Å –≤–æ–ª–Ω—É–µ—Ç, –∫–∞–∫ –ø—Ä—è–º–æ–π –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏."
        " –î—É–º–∞–µ–º, –Ω–µ –Ω–∞–¥–æ –æ–±—ä—è—Å–Ω—è—Ç—å, —á—Ç–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ ‚Äî –æ–¥–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –Ω–∞—à–µ–π –∂–∏–∑–Ω–∏ –∏ –æ–Ω–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
        " –ù–∞–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ ‚Äî —Ü–µ–ª–∞—è '–Ω–∞—É–∫–∞' –∏ –∑–¥–µ—Å—å —É –Ω–∞—Å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ –º—ã –≤—Å—ë –∂–µ –ø–æ–¥—Å–≤–µ—Ç–∏–º 1 –∞—Å–ø–µ–∫—Ç: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"
        "\n\n–ù–∞–º –≤—Å–µ–º –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ –ø–æ–ø–∞–¥–∞—Ç—å –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –º–Ω–æ–≥–∏–µ –ª—é–¥–∏ —Å—Ç–∞—Ä–∞—é—Ç—Å—è –∏—Ö –∏–∑–±–µ–≥–∞—Ç—å."
        " –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö –ø—Ä–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å–∫—Ä—ã—Ç—ã."
        " –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–º–∞–ª—á–∏–≤–∞—Ç—å –æ –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è—Ö, –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –∏ –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –æ–±–æ–∏—Ö",
        reply_markup=keyboard.as_markup()
    )


@day_router16.callback_query(Text(text="ALWAYS_DO|16"))
@is_now_day(16)
async def answer_day16_4(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await message.message.edit_reply_markup()
    await message.message.answer_sticker(sticker=sticker_ids[-5])
    question = await message.message.answer(
        "–ï—â—ë –æ–¥–∏–Ω –∞—Å–ø–µ–∫—Ç, –ø—Ä–æ –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–≥–æ–≤–æ—Ä–∏–º —Å–µ–≥–æ–¥–Ω—è ‚Äî –º–æ—Ç–∏–≤–∞—Ü–∏—è."
        " –ú—ã —É–∂–µ –æ–±—Å—É–¥–∏–ª–∏, —á—Ç–æ –≥–æ—Ä–∞–∑–¥–æ –ª–µ–≥—á–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å —Å–º—ã—Å–ª —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å, –∏ –Ω–∞ —á—Ç–æ —Ç–≤–æ—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç, –∞ –µ—â—ë –µ—Å–ª–∏ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –∫–ª–∏–º–∞—Ç üëê"
        " –ï—Å—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ñ–∞–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –æ–±—Å—É–¥–∏—Ç—å: –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–ª–ª–µ–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å —Ä–∞–∑–Ω–æ–π –∏ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ç–µ–±–µ –≤–∞–∂–Ω–æ —É—Å–ª—ã—à–∞—Ç—å:"
        " –ø–æ–¥—Ä–æ–±–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ –∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —É–ª—É—á—à–∏—Ç—å, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏ —Ç.–¥.), –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É"
        "\n\n–ö–∞–∫—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –ø–æ–ª—É—á–∞—Ç—å?"
    )
    await state.set_state(InputMessage.input_answer_state16_5)


@day_router16.message(F.text, InputMessage.input_answer_state16_5)
@is_now_day(16)
async def answer_day16_5(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    await message.answer_sticker(sticker=sticker_ids[-4])
    question = await message.answer(
        "–ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ –µ—Å—Ç—å –µ—â—ë –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—é:"
        "\n‚Ä¢ —Ç–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ (–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –ø—Ä–µ—Å—Ç–∏–∂–Ω–æ–π —Ä–∞–±–æ—Ç–µ, –ø–æ–≤—ã—à–µ–Ω–∏—é —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞, —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏ –∏/–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—é –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–≥–æ, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é) –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ)"
        "\n‚Ä¢ —è—Å–Ω—ã–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–∂–Ω—ã–µ, –Ω–æ –¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —Ü–µ–ª–∏"
        "\n‚Ä¢ —Ç—Ä–µ–±—É–µ–º—ã–µ –∏ –∏–º–µ—é—â–∏–µ—Å—è —Ä–µ—Å—É—Ä—Å—ã (–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –∏ –Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ)"
        "\n‚Ä¢ –ø–æ–æ—â—Ä–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã (—Ç–∞–∫–∂–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –∏ –Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ)"
        "\n\n–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ —Ç–µ–±—è?"
        "\n–ß–µ–≥–æ –≤ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ –∏–ª–∏ —É—á–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —á—Ç–æ–±—ã –º–æ—Ç–∏–≤–∞—Ü–∏—è –±—ã–ª–∞ –≤—ã—à–µ?"
    )
    await state.set_state(InputMessage.input_answer_state16_6)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router16.message(F.text, InputMessage.input_answer_state16_6)
@is_now_day(16)
async def answer_day16_6(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    question = await message.answer("–ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—é —ç—Ç–æ–≥–æ?")
    await state.set_state(InputMessage.input_answer_state16_7)
    await state.update_data(question=str(await Users_stat(message.from_user.id).get_user_day()) + ". " + question.text)


@day_router16.message(F.text, InputMessage.input_answer_state16_7)
@is_now_day(16)
async def answer_day16_7(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question = data.get("question")
    answers = Answers()
    await answers.add_answer(question=question, answer=message.text, user_id=message.from_user.id)
    await message.answer(
        "–•–æ—Ä–æ—à–æ)\n–î–∞–≤–∞–π –µ—â—ë –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É —Ç–µ–±—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"
    )
    await state.clear()
    await start_LLIC(message, state, bot)

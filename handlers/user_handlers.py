import asyncio

from aiogram import Router, types, Bot, F
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.admins import Admin
from db.day_stat import DAY_STAT
from db.users import Users
from db.users_stat import Users_stat
from keyboards import confirm_keyboard, gender_keyboard, course_keyboard, job_pro_keyboard, education_form_keyboard, \
    format_job_keyboard, format_job_fulltime_keyboard, work_schedule_keyboard, visit_psychology_keyboard, \
    ready_stress_keyboard
from settings import start_text, InputMessage
from utils.Oprosnik1 import oprosnik1_keyboard, generate_plot_statements
from utils.is_main_admin import is_main_admin
from utils.is_now_day import is_now_day
from utils.statements_user import statements, statements_keyboard, level_state, generate_plot

user_router = Router()


@user_router.message(Text(text="/admin"), any_state)
@is_main_admin
async def start(message: types.Message, state: FSMContext, bot: Bot):
    text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—é:"
    results = await DAY_STAT().get_day_stat()
    for i in range(len(results)):
        text += f"\n{i} –¥–µ–Ω—å: {results[i]}"
    await message.answer(text=text)
    await message.answer_document(document=FSInputFile("data/users.xlsx"))
    await message.answer_document(document=FSInputFile("data/answers.xlsx"))
    await message.answer_document(document=FSInputFile("data/feed_back.xlsx"))


@user_router.message(F.text, InputMessage.connect_us)
async def start(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    admin_id = await Admin().get_admins()
    admin_id = admin_id[1]
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_answer_user|{message.from_user.id}"))
    await bot.send_message(chat_id=admin_id, text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {message.from_user.id}:\n{message.text}",
                           reply_markup=keyboard.as_markup())


@user_router.callback_query(Text(startswith="admin_answer_user|"), any_state)
async def start(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = message.data.split("|")
    user_id = data[1]
    message_delete = message.message.message_id
    await state.set_state(InputMessage.answer_admin_to_user)
    await state.update_data(user_id=user_id, message_delete=message_delete)
    await message.message.answer(f"–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id {user_id}")


@user_router.message(F.text, InputMessage.answer_admin_to_user)
async def start(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user_id = data.get("user_id")
    message_delete = data.get("message_delete")
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏", callback_data=f"sqwertyuiop"))
    await bot.send_message(chat_id=user_id, text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞:\n{message.text}")
    await bot.edit_message_reply_markup(chat_id=message.from_user.id, message_id=message_delete,
                                        reply_markup=keyboard.as_markup())
    await state.clear()


@user_router.message(Text(text="/start"), any_state)
async def start(message: types.Message, state: FSMContext, bot: Bot):
    user = Users_stat(message.from_user.id)
    user_day = await user.get_user_day()
    if user_day is None:
        await state.clear()
        keyboard = await confirm_keyboard(0)
        await message.answer(start_text, reply_markup=keyboard.as_markup())
        await message.delete()
    else:
        await message.reply("–¢—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç–∞–ø –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, –ø—Ä–æ–¥–æ–ª–∂–∏ —Å —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞,"
                            " –≥–¥–µ —Ç—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è!")



@user_router.callback_query(Text(text="confirm|0"), any_state)
async def start(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    user = Users_stat(message.from_user.id)
    await user.add_user()
    await message.message.answer("–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –ø–æ–ª", reply_markup=gender_keyboard.as_markup())
    await message.message.delete()


@user_router.callback_query(Text(startswith="gender|"))
@is_now_day(0)
async def start(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    users = Users()
    await call.message.answer('–í –ø—Ä–æ–≥—Ä–∞–º–º–µ –º—ã –±—É–¥–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –≤ –º—É–∂—Å–∫–æ–º —Ä–æ–¥–µ –∫–∞–∫ –∫ "—Å—Ç—É–¥–µ–Ω—Ç—É". –ù–µ —É–¥–∏–≤–ª—è–π—Å—è üòâ')
    await users.add_new_user(user_id=call.from_user.id)
    await users.user_gender(gender=call.data.split("|")[1], user_id=call.from_user.id)
    await call.message.answer("–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
    await state.set_state(InputMessage.state_age)
    await call.message.delete()


@user_router.message(F.text, InputMessage.state_age)
@is_now_day(0)
async def start(message: types.Message, state: FSMContext, bot: Bot):
    await Users().user_age(age=message.text, user_id=message.from_user.id)
    await message.answer("–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–≤–æ–π –∫—É—Ä—Å ", reply_markup=course_keyboard.as_markup())
    await state.clear()


@user_router.callback_query(Text(startswith="course|"))
@is_now_day(0)
async def start(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await Users().user_course(course=call.data.split("|")[1], user_id=call.from_user.id)
    await call.message.answer("–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è", reply_markup=education_form_keyboard.as_markup())
    await call.message.delete()


@user_router.callback_query(Text(startswith="NOT_STUDENT"), any_state)
@is_now_day(0)
async def start(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.answer("–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π)) –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    await state.set_state(InputMessage.not_student)
    await call.message.delete()

@user_router.callback_query(Text(startswith="education_form|"), any_state)
@is_now_day(0)
async def start(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await Users().user_education_form(education_form=call.data.split("|")[1], user_id=call.from_user.id)
    await call.message.answer("–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å")
    await state.set_state(InputMessage.state_education_direction)


@user_router.message(F.text, InputMessage.state_education_direction)
@is_now_day(0)
async def start(message: types.Message, state: FSMContext, bot: Bot):
    await Users().user_education_direction(education_direction=message.text, user_id=message.from_user.id)
    await message.answer("–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    await state.set_state(InputMessage.state_job_direction)


@user_router.message(F.text, InputMessage.state_job_direction)
@is_now_day(0)
async def start(message: types.Message, state: FSMContext, bot: Bot):
    await Users().user_job_direction(job_direction=message.text, user_id=message.from_user.id)
    await message.answer("–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?", reply_markup=job_pro_keyboard.as_markup())
    await state.clear()


@user_router.callback_query(Text(startswith="job_pro|"), any_state)
@is_now_day(0)
async def start(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    if call.data.split("|")[1] != "Enough":
        await Users().user_professional_compatibility(compatibility=call.data.split("|")[1], user_id=call.from_user.id)
        await call.message.answer("–¢–≤–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã?", reply_markup=format_job_keyboard.as_markup())
    else:
        await call.message.answer("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Ç—ã –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—à—å –ø–æ–¥ –¥—Ä—É–≥–∏–º")
        await state.set_state(InputMessage.enough_job_pro_state)


@user_router.message(F.text, InputMessage.enough_job_pro_state)
@is_now_day(0)
async def start(message: types.Message, state: FSMContext, bot: Bot):
    await Users().user_job_direction(job_direction="–î—Ä—É–≥–æ–µ: " + message.text, user_id=message.from_user.id)
    await message.answer("–¢–≤–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã?", reply_markup=format_job_keyboard.as_markup())
    await state.clear()


@user_router.callback_query(Text(startswith="form_job|"), any_state)
@is_now_day(0)
async def start(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    if call.data.split("|")[1] != "Enough":
        await Users().user_work_format(work_format=call.data.split("|")[1], user_id=call.from_user.id)
        await call.message.answer("–¢–≤–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã?", reply_markup=format_job_fulltime_keyboard.as_markup())
    else:
        await call.message.answer("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Ç—ã –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—à—å –ø–æ–¥ –¥—Ä—É–≥–∏–º")
        await state.set_state(InputMessage.enough_job_format_state)


@user_router.message(F.text, InputMessage.enough_job_format_state)
@is_now_day(0)
async def start(message: types.Message, state: FSMContext, bot: Bot):
    await Users().user_work_format(work_format="–î—Ä—É–≥–æ–µ: " + message.text, user_id=message.from_user.id)
    await message.answer("–¢–≤–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã?", reply_markup=format_job_fulltime_keyboard.as_markup())
    await state.clear()


@user_router.callback_query(Text(startswith="form_job_fulltime|"), any_state)
@is_now_day(0)
async def start(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await Users().user_work_format_full_time(work_format=call.data.split("|")[1], user_id=call.from_user.id)
    await call.message.answer("–¢–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã?", reply_markup=work_schedule_keyboard.as_markup())


@user_router.callback_query(Text(startswith="work_schedule|"), any_state)
@is_now_day(0)
async def start(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await Users().user_work_schedule(work_schedule=call.data.split("|")[1], user_id=call.from_user.id)
    await call.message.answer("–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?")
    await state.set_state(InputMessage.work_hours_state)


@user_router.message(F.text, InputMessage.work_hours_state)
@is_now_day(0)
async def start(message: types.Message, state: FSMContext, bot: Bot):
    await Users().user_work_hours(work_hours=message.text, user_id=message.from_user.id)
    await message.answer("–ü–æ—Å–µ—â–∞–µ—à—å –ª–∏ —Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∞/–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞?",
                         reply_markup=visit_psychology_keyboard.as_markup())
    await state.clear()


@user_router.callback_query(Text(startswith="visit_psychology|"), any_state)
@is_now_day(0)
async def start(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await Users().user_psychologist_visit(psychologist_visit=call.data.split("|")[1], user_id=call.from_user.id)
    await call.message.answer("–ù–∞–∑–æ–≤–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, 3 –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–µ—Å—Å-—Ñ–∞–∫—Ç–æ—Ä–∞, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—à—å—Å—è –≤"
                              " —É—á–µ–±–Ω–æ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    await state.set_state(InputMessage.stress_factors_state)


@user_router.message(F.text, InputMessage.stress_factors_state)
@is_now_day(0)
async def start(message: types.Message, state: FSMContext, bot: Bot):
    await Users().user_stress_factors(stress_factors=message.text, user_id=message.from_user.id)
    await message.answer("–ü–æ—á–µ–º—É —Ç—ã —Ä–µ—à–∏–ª –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏?")
    await state.set_state(InputMessage.user_motivation_state)


@user_router.message(F.text, InputMessage.user_motivation_state)
@is_now_day(0)
async def start(message: types.Message, state: FSMContext, bot: Bot):
    await Users().user_motivation(motivation=message.text, user_id=message.from_user.id)
    await state.clear()
    await message.answer("–£—Ö! –¢–µ–ø–µ—Ä—å –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞)"
                         " –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 50 –≤–æ–ø—Ä–æ—Å–æ–≤ üôÇ –ì–æ—Ç–æ–≤? ",
                         reply_markup=ready_stress_keyboard.as_markup())


@user_router.callback_query(Text(text="ready_stress"), any_state)
async def start_LLIC(call: types.CallbackQuery | types.Message, state: FSMContext, bot: Bot):
    number_test = await Users_stat(call.from_user.id).get_user_next_LLIC()
    if type(call) is types.CallbackQuery:
        await call.message.delete()
        await call.message.answer("–¢–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ä—è–¥ —à–∫–∞–ª, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ"
                             " —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ <b>–í –ù–ê–°–¢–û–Ø–©–ò–ô –ú–û–ú–ï–ù–¢</b>."
                             " –ü–æ–º–Ω–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å <b>—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ</b> –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–π —à–∫–∞–ª–µ")
    else:
        await call.answer(
            "–¢–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ä—è–¥ —à–∫–∞–ª, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ"
            " —Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ <b>–í –ù–ê–°–¢–û–Ø–©–ò–ô –ú–û–ú–ï–ù–¢</b>."
            " –ü–æ–º–Ω–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å <b>—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ</b> –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–π —à–∫–∞–ª–µ")
    keyboard = await oprosnik1_keyboard("1 –≤–æ–ø—Ä–æ—Å", number_test, last_question=0, points=0)
    await state.set_state(InputMessage.oprosnik1_state)
    await state.update_data(last_question=1)
    if type(call) is types.CallbackQuery:
        await call.message.answer("–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç:",
                                  reply_markup=keyboard.as_markup())
    else:
        await call.answer("–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç:",
                                  reply_markup=keyboard.as_markup())


@user_router.callback_query(Text(startswith="answer_oprosnik"), InputMessage.oprosnik1_state)
async def start(call: types.CallbackQuery | types.Message, state: FSMContext, bot: Bot):
    data = call.data.split("|")
    number_test = int(data[0][15:])
    point = await state.get_data()
    point = point.get("last_question")
    isc, last_question = int(data[2]), int(data[1])
    if point is None or (int(point) != last_question):
        return
    if last_question == 10:
        if isc >= 62:
            level = "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞"
        elif 54 <= isc <= 61:
            level = "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞"
        elif 48 <= isc <= 53:
            level = "–ü—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞"
        elif 41 <= isc <= 47:
            level = "–°–Ω–∏–∂–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞"
        else:
            level = "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞"
        await Users().user_isk(numbers_isc=number_test, isk_value=isc, user_id=call.from_user.id)
        await Users().user_isk_level(number_isc=number_test, isk_level=level, user_id=call.from_user.id)
        caption = "–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –¥–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ —É —Ç–µ–±—è —Ç–µ–±—è " + level.lower() + "(" + str(isc) + ")"
        user = Users_stat(call.from_user.id)
        await user.edit_user_end_LLIC()
        await user.append_LLIC_result(isc)
        if number_test != 1:
            photo = await generate_plot_statements(user_id=call.from_user.id)
            await call.message.answer_photo(photo=BufferedInputFile(file=photo, filename="huy.png"), caption=caption)
        else:
            await call.message.answer(text=caption)
        if number_test == 1  or number_test == 13:
            await call.message.answer("–¢–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ä—è–¥ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∏—Ö —á—É–≤—Å—Ç–≤–∞ –∏ –æ—â—É—â–µ–Ω–∏—è,"
                                      " –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å —É —Ç–µ–±—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ—á–∏—Ç–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,"
                                      " –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∫–∞–∂–¥–æ–µ –∏–∑ –Ω–∏—Ö –∏ –æ—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–∏–º –æ–±—ã—á–Ω—ã–º"
                                      " –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è")
            await state.set_state(InputMessage.statement_user_state)
            await state.update_data(last_statement=1)
            next_test = await user.get_user_next_statements()
            keyboard = await statements_keyboard(number_test=next_test, last_statement=0, points="")
            await call.message.answer(statements.get("1 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"), reply_markup=keyboard.as_markup())
        elif number_test == 12:
            await dinamic_22(call, state, bot)
        else:
            await state.clear()
            if type(call) is types.CallbackQuery:
                await call.message.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µüëê")
            else:
                await call.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µüëê")
            await user.edit_user_end_day()
    else:
        keyboard = await oprosnik1_keyboard(f"{last_question + 1} –≤–æ–ø—Ä–æ—Å", number_test,
                                            last_question=last_question, points=isc)
        await call.message.answer("–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–π—á–∞—Å:",
                                  reply_markup=keyboard.as_markup())
        await state.update_data(last_question=last_question + 1)


@user_router.callback_query(Text(startswith="statements_user"), InputMessage.statement_user_state)
async def start(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = call.data.split("|")
    number_test = int(data[0][-1])
    point = await state.get_data()
    point = point.get("last_statement")
    points, last_statement = data[2], int(data[1])
    if point is None or (int(point) != last_statement):
        return
    if last_statement == 40:
        points_list = [int(i) for i in list(points)]
        fatigue = (sum([points_list[int(i) - 1] for i in "9, 11, 12, 21, 32".split(", ")]) -
                   sum([points_list[int(i) - 1] for i in "2, 10, 14, 27, 28".split(", ")]) + 25)
        monotony = (sum([points_list[int(i) - 1] for i in "5, 6, 16, 23, 24, 33, 35".split(", ")]) -
                    sum([points_list[int(i) - 1] for i in "3, 25, 30".split(", ")]) + 15)
        satiety = (sum([points_list[int(i) - 1] for i in "4, 13, 15, 19, 36, 39".split(", ")]) -
                   sum([points_list[int(i) - 1] for i in "1, 17, 20, 26".split(", ")]) + 20)
        stress = (sum([points_list[int(i) - 1] for i in "7, 18, 22, 31, 34, 37, 40".split(", ")]) -
                  sum([points_list[int(i) - 1] for i in "8, 29, 38".split(", ")]) + 15)
        level_fatigue = await level_state(object="–£—Ç–æ–º–ª–µ–Ω–∏–µ", number=fatigue)
        level_monotony = await level_state(object="–ú–æ–Ω–æ—Ç–æ–Ω–∏—è", number=monotony)
        level_satiety = await level_state(object="–ü—Ä–µ—Å—ã—â–µ–Ω–∏–µ", number=satiety)
        level_stress = await level_state(object="–°—Ç—Ä–µ—Å—Å", number=stress)
        caption = (f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–∏–∫–∞–ºüëá\n"
                   f"{level_fatigue} - {fatigue}\n"
                   f"{level_monotony} - {monotony}\n"
                   f"{level_satiety} - {satiety}\n"
                   f"{level_stress} - {stress}")
        data_list = [fatigue, monotony, satiety, stress]
        photo = await generate_plot(numbers=data_list, user_id=call.from_user.id)
        await call.message.answer_photo(photo=BufferedInputFile(file=photo, filename="huy.png"),
                                        caption=caption)
        user = Users_stat(call.from_user.id)
        await user.edit_user_end_day()
        await user.edit_user_end_statements()
        await Users().user_fatigue(number_test=number_test, fatigue_value=fatigue, user_id=call.from_user.id)
        await Users().user_monotony(number_test=number_test, monotony_value=monotony, user_id=call.from_user.id)
        await Users().user_saturation(number_test=number_test, saturation_value=satiety, user_id=call.from_user.id)
        await Users().user_stress(number_test=number_test, stress_value=stress, user_id=call.from_user.id)
        await Users().user_fatigue_level(number_test=number_test, fatigue_level=level_fatigue, user_id=call.from_user.id)
        await Users().user_monotony_level(number_test=number_test, monotony_level=level_monotony, user_id=call.from_user.id)
        await Users().user_saturation_level(number_test=number_test, saturation_level=level_satiety, user_id=call.from_user.id)
        await Users().user_stress_level(number_test=number_test, stress_level=level_stress, user_id=call.from_user.id)
        if number_test == 3:
            await call.message.answer("–ù—É –≤–æ—Ç –∏ –≤—Å—ë! –¢—ã ‚Äî –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –≤–ª–æ–∂–∏–ª –≤—Ä–µ–º—è –∏ —Å–∏–ª—ã –≤ —Å–≤–æ–µ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ."
                                      " –î—É–º–∞–µ–º, —ç—Ç–æ –æ–∫—É–ø–∏—Ç—Å—è —Å–ø–æ–ª–Ω–∞ —Å–ø–æ–ª—å–∑—É–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –≤–æ –±–ª–∞–≥–æ —Å–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∞ –º—ã –≤–µ—Ä–Ω—ë–º—Å—è —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —É–¥–∞–ª–æ—Å—å –ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ —Å–≤–æ—é –∂–∏–∑–Ω—åüëê")
            await state.clear()
            await asyncio.sleep(30*24*60*60)
            await call.message.answer("–ü—Ä–∏–≤–µ—Ç! –ú–µ—Å—è—Ü –Ω–∞–∑–∞–¥ —Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–∞—à—É –ø—Ä–æ–≥—Ä–∞–º–º—É ü§©–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ?")
            await start_LLIC(call, state, bot)
            return
        elif number_test == 1:
            await call.message.answer("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤—Å–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ —á–µ–º —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è —ç—Ç–∏ –ø–æ–Ω—è—Ç–∏—è?"
                                  " –û–± —ç—Ç–æ–º —Ç—ã —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —É–∑–Ω–∞–µ—à—å –≤ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µüòâ")
            await call.message.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µüëê")
        elif number_test == 4:
            keyboard = InlineKeyboardBuilder()
            keyboard.row(InlineKeyboardButton(text="üòç", callback_data="answer|23üòç"))
            keyboard.row(InlineKeyboardButton(text="üôÇ", callback_data="answer|23üôÇ"))
            keyboard.row(InlineKeyboardButton(text="üòü", callback_data="answer|23üòü"))
            await call.message.answer("–£—Ö —Ç—ã! –ö–∞–∫ —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?", reply_markup=keyboard.as_markup())
        else:
            await call.message.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µüëê")
        await state.clear()
    else:
        keyboard = await statements_keyboard(number_test=number_test, last_statement=last_statement, points=points)
        await state.update_data(last_statement=int(point) + 1)
        await call.message.answer(f"{statements.get(str(last_statement + 1) + ' —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')}",
                                  reply_markup=keyboard.as_markup())


async def start_statement_next_days(message: types.Message | types.CallbackQuery, state: FSMContext, bot: Bot):
    if type(message) == types.CallbackQuery:
        await message.message.answer("–¢–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ä—è–¥ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∏—Ö —á—É–≤—Å—Ç–≤–∞ –∏ –æ—â—É—â–µ–Ω–∏—è,"
                                  " –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å —É —Ç–µ–±—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ—á–∏—Ç–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,"
                                  " –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∫–∞–∂–¥–æ–µ –∏–∑ –Ω–∏—Ö –∏ –æ—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–∏–º –æ–±—ã—á–Ω—ã–º"
                                  " –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è")
    else:
        await message.answer("–¢–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ä—è–¥ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∏—Ö —á—É–≤—Å—Ç–≤–∞ –∏ –æ—â—É—â–µ–Ω–∏—è,"
                                     " –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å —É —Ç–µ–±—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ—á–∏—Ç–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,"
                                     " –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∫–∞–∂–¥–æ–µ –∏–∑ –Ω–∏—Ö –∏ –æ—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–∏–º –æ–±—ã—á–Ω—ã–º"
                                     " –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è")
    await state.set_state(InputMessage.statement_user_state)
    await state.update_data(last_statement=1)
    user = Users_stat(message.from_user.id)
    next_test = await user.get_user_next_statements()
    keyboard = await statements_keyboard(number_test=next_test, last_statement=0, points="")
    if type(message) == types.CallbackQuery:
        await message.message.answer(statements.get("1 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"), reply_markup=keyboard.as_markup())
    else:
        await message.answer(statements.get("1 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"), reply_markup=keyboard.as_markup())


async def dinamic_22(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    await message.message.answer("–ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —Å —á–µ–º —Å–≤—è–∑–∞–Ω–∞ —Ç–∞–∫–∞—è –¥–∏–Ω–∞–º–∏–∫–∞?")
    await state.set_state(InputMessage.input_answer_state22_100)

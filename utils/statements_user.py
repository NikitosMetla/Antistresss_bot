import asyncio
import base64
import io
from io import BytesIO

from aiogram import types
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from matplotlib import pyplot as plt

statements = {
    '1 утверждение': 'Работа доставляет мне удовольствие',
    '2 утверждение': 'Я с легкостью могу полностью сконцентрироваться на работе',
    '3 утверждение': 'Работа не кажется мне “тупой” или слишком однообразной',
    '4 утверждение': 'Я работаю почти с отвращением',
    '5 утверждение': 'Я чувствую себя неповоротливым и сонным',
    '6 утверждение': 'Хотелось бы, чтобы в моей работе было побольше разнообразных заданий',
    '7 утверждение': 'У меня возникает чувство неуверенности при выполнении работы',
    '8 утверждение': 'На возникающие помехи и неполадки в работе я реагирую спокойно и собранно',
    '9 утверждение': 'Чтобы справляться с выполнением рабочих заданий мне приходиться затрачивать гораздо больше усилий, чем я привык',
    '10 утверждение': 'Моя работа “идет” без особого напряжения',
    '11 утверждение': 'Я теряю общий контроль над рабочей ситуацией',
    '12 утверждение': 'Я чувствую себя утомленным',
    '13 утверждение': 'Я продолжаю работать и дальше, хотя не испытываю особого интереса',
    '14 утверждение': 'Все, что происходит на моем рабочем месте, я могу контролировать без всякого напряжения',
    '15 утверждение': 'Я работаю с неохотой',
    '16 утверждение': 'Я пытаюсь изменить деятельность или отвлечься, чтобы преодолеть чувство усталости',
    '17 утверждение': 'Я нахожу свою работу достаточно приятной и интересной',
    '18 утверждение': 'Бывает, что в некоторых рабочих ситуациях я испытываю страх',
    '19 утверждение': 'На работе я вялый и безрадостный',
    '20 утверждение': 'Работа не очень тяготит меня',
    '21 утверждение': 'Мне приходится заставлять себя работать',
    '22 утверждение': 'Возникают ситуации, когда приходится мгновенно собраться и принимать решения, чтобы предотвратить возможные сбои и неполадки в работе',
    '23 утверждение': 'Во время работы мне хочется встать, немного размяться и подвигаться',
    '24 утверждение': 'Я на грани того, чтобы заснуть прямо за работой',
    '25 утверждение': 'Моя работа полна разнообразных заданий',
    '26 утверждение': 'Я с удовольствием выполняю свою работу',
    '27 утверждение': 'Мне кажется, что я легко могу справиться с любой поставленной передо мной рабочей задачей',
    '28 утверждение': 'Я собран и полностью “включен” в выполнение любого порученного мне задания',
    '29 утверждение': 'Я могу без труда принять все необходимые меры для преодоления сложных ситуаций',
    '30 утверждение': 'Время за работой пролетает незаметно',
    '31 утверждение': 'Я привык к тому, что в моей работе постоянно может случаться что-то непредвиденное',
    '32 утверждение': 'Я реагирую на происходящее недостаточно быстро',
    '33 утверждение': 'Я ловлю себя на ощущении, что время как бы остановилось',
    '34 утверждение': 'Мне становится не по себе при любом, даже незначительном сбое или помехе в работе',
    '35 утверждение': 'Моя работа слишком однообразна, и я был бы рад любому изменению в течении рабочего процесса',
    '36 утверждение': 'Я сыт по горло этой работой',
    '37 утверждение': 'Я чувствую себя измученным и совершенно разбитым',
    '38 утверждение': 'Мне не трудно самостоятельно принимать любые решения, касающееся выполнения своей работы',
    '39 утверждение': 'В последнее время работа не приносит мне и половину обычного удовольствия',
    '40 утверждение': 'Я чувствую нервозность и повышенную раздражительность'
}


async def level_state(number: int, object: str):
    if object == "Утомление":
        if number <= 15:
            return object + " - низкая степень"
        elif 16 <= number <= 25:
            return object + " - умеренная степень"
        elif 26 <= number <= 31:
            return object + " - выраженная степень"
        else:
            return object + " - высокая степень"
    elif object == "Монотония":
        if number <= 15:
            return object + " - низкая степень"
        elif 16 <= number <= 25:
            return object + " - умеренная степень"
        elif 26 <= number <= 30:
            return object + " - выраженная степень"
        else:
            return object + " - высокая степень"
    elif object == "Пресыщение" or object=="Стресс":
        if number <= 16:
            return object + " - низкая степень"
        elif 17 <= number <= 24:
            return object + " - умеренная степень"
        elif 25 <= number <= 30:
            return object + " - выраженная степень"
        else:
            return object + " - высокая степень"



async def statements_keyboard(number_test: int, last_statement: int, points: str):
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="Почти никогда",
                                      callback_data=f"statements_user{number_test}|{last_statement + 1}|{points + '1'}"))
    keyboard.row(InlineKeyboardButton(text="Иногда",
                                      callback_data=f"statements_user{number_test}|{last_statement + 1}|{points + '2'}"))
    keyboard.row(InlineKeyboardButton(text="Часто",
                                      callback_data=f"statements_user{number_test}|{last_statement + 1}|{points + '3'}"))
    keyboard.row(InlineKeyboardButton(text="Почти всегда",
                                      callback_data=f"statements_user{number_test}|{last_statement + 1}|{points + '4'}"))
    return keyboard


async def generate_plot(numbers, user_id):
    parametrs = ['Утомление', 'Монотония', 'Пресыщение', 'Стресс']
    numbers = [int(x) for x in numbers]
    plt.plot(parametrs, numbers, color='blue', marker='o', linestyle='-')
    plt.ylim(0, 40)
    plt.xlabel('Параметры')
    plt.ylabel('Значения')
    # plt.savefig(f"data/LLIC_users/LLIC_{user_id}.png")
    buffer = io.BytesIO()

    # Сохраняем график в буфер
    plt.savefig(buffer, format='png')

    # Очищаем график из памяти
    plt.close()

    # Получаем байты из буфера
    buffer.seek(0)
    byte_data = buffer.read()

    return byte_data


async def main():
    await generate_plot([1, 3, 6, 8])

if __name__ == "__main__":
    asyncio.run(main())